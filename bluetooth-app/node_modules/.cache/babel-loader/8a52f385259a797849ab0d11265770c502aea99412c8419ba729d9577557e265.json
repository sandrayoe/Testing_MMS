{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sandr\\\\OneDrive - KTH\\\\Documents\\\\Jobs and Interns\\\\MMS_2025_UI\\\\Testing_MMS\\\\bluetooth-app\\\\src\\\\BluetoothContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BluetoothContext = /*#__PURE__*/createContext(undefined);\n\n// Mock implementation: no backend, simulate IMU updates and algorithm behavior\nexport const BluetoothProvider = ({\n  children\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [device, setDevice] = useState(null);\n  const imuRef = useRef({\n    imu1_changes: [],\n    imu2_changes: []\n  });\n  const imuIntervalRef = useRef(null);\n  const connect = async () => {\n    // Use Web Bluetooth API to find and connect to devices named 'MMS NUS'\n    if (!navigator.bluetooth) {\n      console.error('Web Bluetooth API is not available in this browser.');\n      throw new Error('Web Bluetooth API not available');\n    }\n    try {\n      var _device$name, _device$addEventListe;\n      // Prefer explicit name filter so the chooser only shows matching devices\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          name: 'MMS NUS'\n        }],\n        // include the Nordic UART Service (NUS) UUID as an example optional service\n        optionalServices: ['6e400001-b5a3-f393-e0a9-e50e24dcca9e']\n      });\n\n      // Save raw device for disconnect handling\n      rawDeviceRef.current = device;\n\n      // Connect to GATT server if available\n      if (device.gatt) {\n        const server = await device.gatt.connect();\n        rawServerRef.current = server;\n      }\n      setDevice({\n        id: device.id,\n        name: (_device$name = device.name) !== null && _device$name !== void 0 ? _device$name : 'MMS NUS'\n      });\n      setIsConnected(true);\n\n      // Listen for unexpected disconnects and update state\n      (_device$addEventListe = device.addEventListener) === null || _device$addEventListe === void 0 ? void 0 : _device$addEventListe.call(device, 'gattserverdisconnected', () => {\n        console.log('Bluetooth device disconnected');\n        stopIMU();\n        setIsConnected(false);\n        setDevice(null);\n        rawDeviceRef.current = null;\n        rawServerRef.current = null;\n      });\n    } catch (err) {\n      // user cancelled chooser or other error\n      console.error('Bluetooth connect failed:', err);\n      throw err;\n    }\n  };\n  const disconnect = () => {\n    stopIMU();\n    // If a device is connected via GATT, disconnect it cleanly\n    try {\n      var _rawDeviceRef$current;\n      if (rawServerRef.current && rawServerRef.current.connected) {\n        rawServerRef.current.disconnect();\n      } else if (rawDeviceRef.current && (_rawDeviceRef$current = rawDeviceRef.current.gatt) !== null && _rawDeviceRef$current !== void 0 && _rawDeviceRef$current.connected) {\n        rawDeviceRef.current.gatt.disconnect();\n      }\n    } catch (e) {\n      console.warn('Error during Bluetooth disconnect', e);\n    }\n    setIsConnected(false);\n    setDevice(null);\n    rawDeviceRef.current = null;\n    rawServerRef.current = null;\n  };\n  const startIMU = () => {\n    // simulate IMU generating random changes\n    if (imuIntervalRef.current) return;\n    imuIntervalRef.current = window.setInterval(() => {\n      const a = Math.random() * 3;\n      const b = Math.random() * 3;\n      imuRef.current.imu1_changes.push(a);\n      imuRef.current.imu2_changes.push(b);\n      // keep short history\n      if (imuRef.current.imu1_changes.length > 500) imuRef.current.imu1_changes.shift();\n      if (imuRef.current.imu2_changes.length > 500) imuRef.current.imu2_changes.shift();\n    }, 100);\n  };\n  const stopIMU = () => {\n    if (imuIntervalRef.current) {\n      clearInterval(imuIntervalRef.current);\n      imuIntervalRef.current = null;\n    }\n  };\n\n  // Optimization loop removed â€” this frontend demo no longer exposes algorithm control.\n\n  const initializeDevice = async () => {\n    // no-op for frontend-only demo\n    await new Promise(r => setTimeout(r, 200));\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(BluetoothContext.Provider, {\n    value: {\n      isConnected,\n      device,\n      connect,\n      disconnect,\n      startIMU: () => startIMU(),\n      stopIMU: () => stopIMU(),\n      imuData: imuRef.current,\n      initializeDevice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothProvider, \"TnHMhfv2UIl5Mll2mC5iKYH+5Gw=\");\n_c = BluetoothProvider;\nexport const useBluetooth = () => {\n  _s2();\n  const ctx = React.useContext(BluetoothContext);\n  if (!ctx) {\n    throw new Error('useBluetooth must be used inside BluetoothProvider');\n  }\n  return ctx;\n};\n_s2(useBluetooth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"BluetoothProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","jsxDEV","_jsxDEV","BluetoothContext","undefined","BluetoothProvider","children","_s","isConnected","setIsConnected","device","setDevice","imuRef","imu1_changes","imu2_changes","imuIntervalRef","connect","navigator","bluetooth","console","error","Error","_device$name","_device$addEventListe","requestDevice","filters","name","optionalServices","rawDeviceRef","current","gatt","server","rawServerRef","id","addEventListener","call","log","stopIMU","err","disconnect","_rawDeviceRef$current","connected","e","warn","startIMU","window","setInterval","a","Math","random","b","push","length","shift","clearInterval","initializeDevice","Promise","r","setTimeout","Provider","value","imuData","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBluetooth","_s2","ctx","useContext","$RefreshReg$"],"sources":["C:/Users/sandr/OneDrive - KTH/Documents/Jobs and Interns/MMS_2025_UI/Testing_MMS/bluetooth-app/src/BluetoothContext.tsx"],"sourcesContent":["import React, { createContext, useState, useRef } from 'react'\r\n\r\ntype DeviceInfo = { id: string; name: string }\r\n\r\ntype BluetoothContextType = {\r\n  isConnected: boolean\r\n  device?: DeviceInfo | null\r\n  connect: () => Promise<void>\r\n  disconnect: () => void\r\n  startIMU: () => void\r\n  stopIMU: () => void\r\n  imuData: { imu1_changes: number[]; imu2_changes: number[] }\r\n  // Optimization features removed for this build - previously exposed optimization control functions\r\n  initializeDevice: () => Promise<void>\r\n}\r\n\r\nexport const BluetoothContext = createContext<BluetoothContextType | undefined>(undefined)\r\n\r\n// Mock implementation: no backend, simulate IMU updates and algorithm behavior\r\nexport const BluetoothProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false)\r\n  const [device, setDevice] = useState<DeviceInfo | null>(null)\r\n\r\n  const imuRef = useRef({ imu1_changes: [] as number[], imu2_changes: [] as number[] })\r\n  const imuIntervalRef = useRef<number | null>(null)\r\n\r\n  const connect = async () => {\r\n    // Use Web Bluetooth API to find and connect to devices named 'MMS NUS'\r\n    if (!navigator.bluetooth) {\r\n      console.error('Web Bluetooth API is not available in this browser.')\r\n      throw new Error('Web Bluetooth API not available')\r\n    }\r\n\r\n    try {\r\n      // Prefer explicit name filter so the chooser only shows matching devices\r\n      const device = await navigator.bluetooth.requestDevice({\r\n        filters: [{ name: 'MMS NUS' }],\r\n        // include the Nordic UART Service (NUS) UUID as an example optional service\r\n        optionalServices: ['6e400001-b5a3-f393-e0a9-e50e24dcca9e']\r\n      })\r\n\r\n      // Save raw device for disconnect handling\r\n      rawDeviceRef.current = device\r\n\r\n      // Connect to GATT server if available\r\n      if (device.gatt) {\r\n        const server = await device.gatt.connect()\r\n        rawServerRef.current = server\r\n      }\r\n\r\n      setDevice({ id: device.id, name: device.name ?? 'MMS NUS' })\r\n      setIsConnected(true)\r\n\r\n      // Listen for unexpected disconnects and update state\r\n      device.addEventListener?.('gattserverdisconnected', () => {\r\n        console.log('Bluetooth device disconnected')\r\n        stopIMU()\r\n        setIsConnected(false)\r\n        setDevice(null)\r\n        rawDeviceRef.current = null\r\n        rawServerRef.current = null\r\n      })\r\n    } catch (err) {\r\n      // user cancelled chooser or other error\r\n      console.error('Bluetooth connect failed:', err)\r\n      throw err\r\n    }\r\n  }\r\n\r\n  const disconnect = () => {\r\n    stopIMU()\r\n    // If a device is connected via GATT, disconnect it cleanly\r\n    try {\r\n      if (rawServerRef.current && rawServerRef.current.connected) {\r\n        rawServerRef.current.disconnect()\r\n      } else if (rawDeviceRef.current && rawDeviceRef.current.gatt?.connected) {\r\n        rawDeviceRef.current.gatt.disconnect()\r\n      }\r\n    } catch (e) {\r\n      console.warn('Error during Bluetooth disconnect', e)\r\n    }\r\n\r\n    setIsConnected(false)\r\n    setDevice(null)\r\n    rawDeviceRef.current = null\r\n    rawServerRef.current = null\r\n  }\r\n\r\n  const startIMU = () => {\r\n    // simulate IMU generating random changes\r\n    if (imuIntervalRef.current) return\r\n    imuIntervalRef.current = window.setInterval(() => {\r\n      const a = Math.random() * 3\r\n      const b = Math.random() * 3\r\n      imuRef.current.imu1_changes.push(a)\r\n      imuRef.current.imu2_changes.push(b)\r\n      // keep short history\r\n      if (imuRef.current.imu1_changes.length > 500) imuRef.current.imu1_changes.shift()\r\n      if (imuRef.current.imu2_changes.length > 500) imuRef.current.imu2_changes.shift()\r\n    }, 100)\r\n  }\r\n\r\n  const stopIMU = () => {\r\n    if (imuIntervalRef.current) {\r\n      clearInterval(imuIntervalRef.current)\r\n      imuIntervalRef.current = null\r\n    }\r\n  }\r\n\r\n\r\n  // Optimization loop removed â€” this frontend demo no longer exposes algorithm control.\r\n\r\n  const initializeDevice = async () => {\r\n    // no-op for frontend-only demo\r\n    await new Promise((r) => setTimeout(r, 200))\r\n    return\r\n  }\r\n\r\n  return (\r\n    <BluetoothContext.Provider value={{\r\n      isConnected,\r\n      device,\r\n      connect,\r\n      disconnect,\r\n      startIMU: () => startIMU(),\r\n      stopIMU: () => stopIMU(),\r\n      imuData: imuRef.current,\r\n      initializeDevice\r\n    }}>\r\n      {children}\r\n    </BluetoothContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useBluetooth = () => {\r\n  const ctx = React.useContext(BluetoothContext)\r\n  if (!ctx) {\r\n    throw new Error('useBluetooth must be used inside BluetoothProvider')\r\n  }\r\n  return ctx\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
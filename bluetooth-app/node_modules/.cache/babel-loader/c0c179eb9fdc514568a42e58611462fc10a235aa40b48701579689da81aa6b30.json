{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sandr\\\\OneDrive - KTH\\\\Documents\\\\Jobs and Interns\\\\MMS_2025_UI\\\\Testing_MMS\\\\bluetooth-app\\\\src\\\\BluetoothContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BluetoothContext = /*#__PURE__*/createContext(undefined);\n\n// Mock implementation: no backend, simulate IMU updates and algorithm behavior\nexport const BluetoothProvider = ({\n  children\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [device, setDevice] = useState(null);\n  const imuRef = useRef({\n    imu1_changes: [],\n    imu2_changes: []\n  });\n  const imuIntervalRef = useRef(null);\n  const optimizationRunningRef = useRef(false);\n  const connect = async () => {\n    // simulate discovery / connect\n    await new Promise(r => setTimeout(r, 300));\n    setDevice({\n      id: 'mock-1',\n      name: 'Mock NMES Device'\n    });\n    setIsConnected(true);\n  };\n  const disconnect = () => {\n    stopIMU();\n    setIsConnected(false);\n    setDevice(null);\n  };\n  const startIMU = () => {\n    // simulate IMU generating random changes\n    if (imuIntervalRef.current) return;\n    imuIntervalRef.current = window.setInterval(() => {\n      const a = Math.random() * 3;\n      const b = Math.random() * 3;\n      imuRef.current.imu1_changes.push(a);\n      imuRef.current.imu2_changes.push(b);\n      // keep short history\n      if (imuRef.current.imu1_changes.length > 500) imuRef.current.imu1_changes.shift();\n      if (imuRef.current.imu2_changes.length > 500) imuRef.current.imu2_changes.shift();\n    }, 100);\n  };\n  const stopIMU = () => {\n    if (imuIntervalRef.current) {\n      clearInterval(imuIntervalRef.current);\n      imuIntervalRef.current = null;\n    }\n  };\n  const runOptimizationLoop = async (updateCurrentPair, updateBestPair, updateCurrentValue, updateBestCurrent, minCurrent, maxCurrent) => {\n    optimizationRunningRef.current = true;\n    // simulate scanning electrode pairs and currents\n    const pairs = [[1, 2], [1, 3], [2, 3]];\n    let bestScore = -Infinity;\n    let bestPair = pairs[0];\n    for (const p of pairs) {\n      if (!optimizationRunningRef.current) break;\n      updateCurrentPair(p);\n      for (let c = Math.round(minCurrent); c <= Math.round(maxCurrent); c += 1) {\n        var _imuRef$current$imu1_, _imuRef$current$imu2_;\n        if (!optimizationRunningRef.current) break;\n        updateCurrentValue(c);\n        // simulate taking sensor measurements\n        await new Promise(r => setTimeout(r, 200));\n        const imu1 = (_imuRef$current$imu1_ = imuRef.current.imu1_changes[imuRef.current.imu1_changes.length - 1]) !== null && _imuRef$current$imu1_ !== void 0 ? _imuRef$current$imu1_ : 0;\n        const imu2 = (_imuRef$current$imu2_ = imuRef.current.imu2_changes[imuRef.current.imu2_changes.length - 1]) !== null && _imuRef$current$imu2_ !== void 0 ? _imuRef$current$imu2_ : 0;\n        const score = imu1 + imu2 + Math.random() * 0.5;\n        if (score > bestScore) {\n          bestScore = score;\n          bestPair = p;\n          updateBestPair(bestPair);\n          updateBestCurrent(c);\n        }\n      }\n    }\n    optimizationRunningRef.current = false;\n  };\n  const stopOptimizationLoop = async () => {\n    optimizationRunningRef.current = false;\n  };\n  const initializeDevice = async () => {\n    // no-op for frontend-only demo\n    await new Promise(r => setTimeout(r, 200));\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(BluetoothContext.Provider, {\n    value: {\n      isConnected,\n      device,\n      connect,\n      disconnect,\n      startIMU: () => startIMU(),\n      stopIMU: () => stopIMU(),\n      imuData: imuRef.current,\n      runOptimizationLoop,\n      stopOptimizationLoop,\n      initializeDevice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothProvider, \"HAn3+vhLTYXml6pmZab7R2bzASE=\");\n_c = BluetoothProvider;\nexport const useBluetooth = () => {\n  _s2();\n  const ctx = React.useContext(BluetoothContext);\n  if (!ctx) {\n    throw new Error('useBluetooth must be used inside BluetoothProvider');\n  }\n  return ctx;\n};\n_s2(useBluetooth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"BluetoothProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","jsxDEV","_jsxDEV","BluetoothContext","undefined","BluetoothProvider","children","_s","isConnected","setIsConnected","device","setDevice","imuRef","imu1_changes","imu2_changes","imuIntervalRef","optimizationRunningRef","connect","Promise","r","setTimeout","id","name","disconnect","stopIMU","startIMU","current","window","setInterval","a","Math","random","b","push","length","shift","clearInterval","runOptimizationLoop","updateCurrentPair","updateBestPair","updateCurrentValue","updateBestCurrent","minCurrent","maxCurrent","pairs","bestScore","Infinity","bestPair","p","c","round","_imuRef$current$imu1_","_imuRef$current$imu2_","imu1","imu2","score","stopOptimizationLoop","initializeDevice","Provider","value","imuData","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBluetooth","_s2","ctx","useContext","Error","$RefreshReg$"],"sources":["C:/Users/sandr/OneDrive - KTH/Documents/Jobs and Interns/MMS_2025_UI/Testing_MMS/bluetooth-app/src/BluetoothContext.tsx"],"sourcesContent":["import React, { createContext, useState, useRef } from 'react'\r\n\r\ntype DeviceInfo = { id: string; name: string }\r\n\r\ntype BluetoothContextType = {\r\n  isConnected: boolean\r\n  device?: DeviceInfo | null\r\n  connect: () => Promise<void>\r\n  disconnect: () => void\r\n  startIMU: () => void\r\n  stopIMU: () => void\r\n  imuData: { imu1_changes: number[]; imu2_changes: number[] }\r\n  runOptimizationLoop: (\r\n    updateCurrentPair: (pair: [number, number]) => void,\r\n    updateBestPair: (pair: [number, number]) => void,\r\n    updateCurrentValue: (current: number) => void,\r\n    updateBestCurrent: (current: number) => void,\r\n    minCurrent: number,\r\n    maxCurrent: number\r\n  ) => Promise<void>\r\n  stopOptimizationLoop: () => Promise<void>\r\n  initializeDevice: () => Promise<void>\r\n}\r\n\r\nexport const BluetoothContext = createContext<BluetoothContextType | undefined>(undefined)\r\n\r\n// Mock implementation: no backend, simulate IMU updates and algorithm behavior\r\nexport const BluetoothProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false)\r\n  const [device, setDevice] = useState<DeviceInfo | null>(null)\r\n\r\n  const imuRef = useRef({ imu1_changes: [] as number[], imu2_changes: [] as number[] })\r\n  const imuIntervalRef = useRef<number | null>(null)\r\n  const optimizationRunningRef = useRef(false)\r\n\r\n  const connect = async () => {\r\n    // simulate discovery / connect\r\n    await new Promise((r) => setTimeout(r, 300))\r\n    setDevice({ id: 'mock-1', name: 'Mock NMES Device' })\r\n    setIsConnected(true)\r\n  }\r\n\r\n  const disconnect = () => {\r\n    stopIMU()\r\n    setIsConnected(false)\r\n    setDevice(null)\r\n  }\r\n\r\n  const startIMU = () => {\r\n    // simulate IMU generating random changes\r\n    if (imuIntervalRef.current) return\r\n    imuIntervalRef.current = window.setInterval(() => {\r\n      const a = Math.random() * 3\r\n      const b = Math.random() * 3\r\n      imuRef.current.imu1_changes.push(a)\r\n      imuRef.current.imu2_changes.push(b)\r\n      // keep short history\r\n      if (imuRef.current.imu1_changes.length > 500) imuRef.current.imu1_changes.shift()\r\n      if (imuRef.current.imu2_changes.length > 500) imuRef.current.imu2_changes.shift()\r\n    }, 100)\r\n  }\r\n\r\n  const stopIMU = () => {\r\n    if (imuIntervalRef.current) {\r\n      clearInterval(imuIntervalRef.current)\r\n      imuIntervalRef.current = null\r\n    }\r\n  }\r\n\r\n  const runOptimizationLoop = async (\r\n    updateCurrentPair: (pair: [number, number]) => void,\r\n    updateBestPair: (pair: [number, number]) => void,\r\n    updateCurrentValue: (current: number) => void,\r\n    updateBestCurrent: (current: number) => void,\r\n    minCurrent: number,\r\n    maxCurrent: number\r\n  ) => {\r\n    optimizationRunningRef.current = true\r\n    // simulate scanning electrode pairs and currents\r\n    const pairs: [number, number][] = [[1,2],[1,3],[2,3]]\r\n    let bestScore = -Infinity\r\n    let bestPair: [number, number] = pairs[0]\r\n    for (const p of pairs) {\r\n      if (!optimizationRunningRef.current) break\r\n      updateCurrentPair(p)\r\n      for (let c = Math.round(minCurrent); c <= Math.round(maxCurrent); c += 1) {\r\n        if (!optimizationRunningRef.current) break\r\n        updateCurrentValue(c)\r\n        // simulate taking sensor measurements\r\n        await new Promise((r) => setTimeout(r, 200))\r\n        const imu1 = imuRef.current.imu1_changes[imuRef.current.imu1_changes.length - 1] ?? 0\r\n        const imu2 = imuRef.current.imu2_changes[imuRef.current.imu2_changes.length - 1] ?? 0\r\n        const score = imu1 + imu2 + Math.random() * 0.5\r\n        if (score > bestScore) {\r\n          bestScore = score\r\n          bestPair = p\r\n          updateBestPair(bestPair)\r\n          updateBestCurrent(c)\r\n        }\r\n      }\r\n    }\r\n    optimizationRunningRef.current = false\r\n  }\r\n\r\n  const stopOptimizationLoop = async () => {\r\n    optimizationRunningRef.current = false\r\n  }\r\n\r\n  const initializeDevice = async () => {\r\n    // no-op for frontend-only demo\r\n    await new Promise((r) => setTimeout(r, 200))\r\n    return\r\n  }\r\n\r\n  return (\r\n    <BluetoothContext.Provider value={{\r\n      isConnected,\r\n      device,\r\n      connect,\r\n      disconnect,\r\n      startIMU: () => startIMU(),\r\n      stopIMU: () => stopIMU(),\r\n      imuData: imuRef.current,\r\n      runOptimizationLoop,\r\n      stopOptimizationLoop,\r\n      initializeDevice\r\n    }}>\r\n      {children}\r\n    </BluetoothContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useBluetooth = () => {\r\n  const ctx = React.useContext(BluetoothContext)\r\n  if (!ctx) {\r\n    throw new Error('useBluetooth must be used inside BluetoothProvider')\r\n  }\r\n  return ctx\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}